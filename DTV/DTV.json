{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/Thunder/master/Tools/JsonGenerator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "DTV API",
        "class": "DTV",
        "description": "The `DTV` plugin provides access to DVB services provided by a DVB stack."
    },
    "common": {
        "errors": {
            "general": {
                "code": 1,
                "message": "ERROR_GENERAL"
            },
            "unavailable": {
                "code": 2,
                "message": "ERROR_UNAVAILABLE"
            },
            "asyncfailed": {
                "code": 3,
                "message": "ERROR_ASYNC_FAILED"
            },
            "asyncaborted": {
                "code": 4,
                "message": "ERROR_ASYNC_ABORTED"
            },
            "illegalstate": {
                "code": 5,
                "message": "ERROR_ILLEGAL_STATE"
            },
            "openingfailed": {
                "code": 6,
                "message": "ERROR_OPENING_FAILED"
            },
            "acceptfailed": {
                "code": 7,
                "message": "ERROR_ACCEPT_FAILED"
            },
            "pendingshutdown": {
                "code": 8,
                "message": "ERROR_PENDING_SHUTDOWN"
            },
            "alreadyconnected": {
                "code": 9,
                "message": "ERROR_ALREADY_CONNECTED"
            },
            "connectionclosed": {
                "code": 10,
                "message": "ERROR_CONNECTION_CLOSED"
            },
            "timedout": {
                "code": 11,
                "message": "ERROR_TIMEDOUT"
            },
            "inprogress": {
                "description": "Operation in progress",
                "code": 12,
                "message": "ERROR_INPROGRESS"                
            },
            "couldnotsetaddress": {
                "code": 13,
                "message": "ERROR_COULD_NOT_SET_ADDRESS"
            },
            "incorrecthash": {
                "description": "Incorrect hash given",
                "code": 14,
                "message": "ERROR_INCORRECT_HASH"
            },
            "incorrecturl": {
                "description": "Incorrect URL given",
                "code": 15,
                "message": "ERROR_INCORRECT_URL"
            },
            "invalidinputlength": {
                "code": 16,
                "message": "ERROR_INVALID_INPUT_LENGTH"
            },
            "destructionsucceeded": {
                "code": 17,
                "message": "ERROR_DESTRUCTION_SUCCEEDED"
            },
            "destructionfailed": {
                "code": 18,
                "message": "ERROR_DESTRUCTION_FAILED"
            },
            "closingfailed": {
                "code": 19,
                "message": "ERROR_CLOSING_FAILED"
            },
            "processterminated": {
                "code": 20,
                "message": "ERROR_PROCESS_TERMINATED"
            },
            "processkilled": {
                "code": 21,
                "message": "ERROR_PROCESS_KILLED"
            },
            "unknownkey": {
                "code": 22,
                "message": "ERROR_UNKNOWN_KEY"
            },
            "incompleteconfig": {
                "code": 23,
                "message": "ERROR_INCOMPLETE_CONFIG"
            },
            "privilegedrequest": {
                "code": 24,
                "message": "ERROR_PRIVILEGED_REQUEST"
            },
            "rpccallfailed": {
                "code": 25,
                "message": "ERROR_RPC_CALL_FAILED"
            },
            "unreachablenetwork": {
                "code": 26,
                "message": "ERROR_UNREACHABLE_NETWORK"
            },
            "requestsubmitted": {
                "code": 27,
                "message": "ERROR_REQUEST_SUBMITTED"
            },
            "unknowntable": {
                "code": 28,
                "message": "ERROR_UNKNOWN_TABLE"
            },
            "duplicatekey": {
                "code": 29,
                "message": "ERROR_DUPLICATE_KEY"
            },
            "badrequest": {
                "code": 30,
                "message": "ERROR_BAD_REQUEST"
            },
            "pendingconditions": {
                "code": 31,
                "message": "ERROR_PENDING_CONDITIONS"
            },
            "surfaceunavailable": {
                "code": 32,
                "message": "ERROR_SURFACE_UNAVAILABLE"
            },
            "playerunavailable": {
                "code": 33,
                "message": "ERROR_PLAYER_UNAVAILABLE"
            },
            "firstresourcenotfound": {
                "code": 34,
                "message": "ERROR_FIRST_RESOURCE_NOT_FOUND"
            },
            "secondsourcenotfound": {
                "code": 35,
                "message": "ERROR_SECOND_RESOURCE_NOT_FOUND"
            },
            "alreadyreleased": {
                "code": 36,
                "message": "ERROR_ALREADY_RELEASED"
            },
            "negtiveacknowledge": {
                "code": 37,
                "message": "ERROR_NEGATIVE_ACKNOWLEDGE"
            },
            "invalidsignature": {
                "code": 38,
                "message": "ERROR_INVALID_SIGNATURE"
            },
            "readerror": {
                "code": 39,
                "message": "ERROR_READ_ERROR"
            },
            "writeerror": {
                "code": 40,
                "message": "ERROR_WRITE_ERROR"
            },
            "invaliddesignator": {
                "code": 41,
                "message": "ERROR_INVALID_DESIGNATOR"
            },
            "unauthenticated": {
                "code": 42,
                "message": "ERROR_UNAUTHENTICATED"
            },
            "notexist": {
                "code": 43,
                "message": "ERROR_NOT_EXIST"
            },
            "notsupported": {
                "code": 44,
                "message": "ERROR_NOT_SUPPORTED"
            }
        },
        "results": {
            "void": {
              "type": "null",
              "default": null,
              "description": "Always null"
            }
        }
    },
    "definitions": {
        "countrycode": {
            "description": "3-character ISO code for the country",
            "type": "number",
            "size": 32,
            "example": 6775410
        },
        "countryconfig": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the country as a UTF-8 string",
                    "type": "string",             
                    "example": "UK"
                },
                "code": {
                    "$ref": "#/definitions/countrycode"
                }
            },
            "required": [
                "name",
                "code"
            ]
        },
        "tunertype": {
            "type": "string",
            "enum": [
                "none",
                "dvbs",
                "dvbt",
                "dvbc"
            ],
            "enumvalues": [
                0,
                1,
                2,
                4
            ]
        },
        "lnbtype": {
            "type": "string",
            "enum": [
                "single",
                "universal",
                "unicable"
            ]
        },
        "lnbpower": {
            "type": "string",
            "enum":[
                "off",
                "on",
                "auto"
            ]
        },
        "diseqc_cswitch": {
            "type": "string",
            "enum": [
                "off",
                "a",
                "b",
                "c",
                "d"
            ]
        },
        "diseqc_tone": {
            "type": "string",
            "enum": [
                "off",
                "a",
                "b"
            ]
        },
        "lnbsettings": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Universal"
                },
                "type": {
                    "$ref": "#/definitions/lnbtype",
                    "example": "universal"
                },
                "power": {
                    "$ref": "#/definitions/lnbpower",
                    "example": "auto"
                },
                "diseqc_tone": {
                    "$ref": "#/definitions/diseqc_tone",
                    "example": "off"
                },
                "diseqc_cswitch": {
                    "$ref": "#/definitions/diseqc_cswitch",
                    "example": "off"
                },
                "is22k": {
                    "type": "boolean"
                },
                "is12v": {
                    "type": "boolean"
                },
                "ispulseposition": {
                    "type": "boolean"
                },
                "isdiseqcposition": {
                    "type": "boolean"
                },
                "issmatv": {
                    "type": "boolean"
                },
                "diseqcrepeats": {
                    "type": "number",
                    "signed": false,
                    "size": 8
                },
                "u_switch": {
                    "type": "number",
                    "signed": false,
                    "size": 8
                },
                "unicablechannel": {
                    "type": "number",
                    "signed": false,
                    "size": 8
                },
                "unicableinterface": {
                    "type": "number",
                    "signed": false,
                    "size": 32
                }
            },
            "required": [
                "name",
                "type",
                "power",
                "diseqc_tone",
                "diseqc_cswitch",
                "is22k",
                "is12v",
                "ispulseposition",
                "isdiseqcposition",
                "issmatv",
                "diseqcrepeats",
                "u_switch",
                "unicablechannel",
                "unicableinterface"
            ]
        },
        "satellitesettings": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Astra 28.2E"
                },
                "longitude": {
                    "description": "Longitudinal location of the satellite in 1/10ths of a degree, with an east coordinate given as a positive value and a west coordinate as negative. Astra 28.2E would be defined as 282 and Eutelsat 5.0W would be -50.",
                    "type": "number",
                    "signed": true,
                    "size": 16,
                    "example": 282
                },
                "lnb": {
                    "summary": "Name of the LNB settings to be used when tuning to this satellite",
                    "type": "string",    
                    "example": "Universal"
                }   
            },
            "required": [
                "name",
                "longitude",
                "lnb"
            ]
        },
        "polarity": {
            "type": "string",
            "enum": [
                "horizontal",
                "vertical",
                "left",
                "right"
            ]
        },
        "fec": {
            "summary": "Forward error correction setting",
            "type": "string",
            "enum": [
                "fecauto",
                "fec1_2",
                "fec2_3",
                "fec3_4",
                "fec5_6",
                "fec7_8",
                "fec1_4",
                "fec1_3",
                "fec2_5",
                "fec8_9",
                "fec9_10"
            ]
        },
        "dvbsmodulation": {
            "type": "string",
            "enum": [
                "auto",
                "qpsk",
                "8psk",
                "16qam"
            ]
        },
        "searchtype": {
            "type": "string",
            "enum": [
                "frequency",
                "network"
            ]
        },
        "dvbstuningparams": {
            "type": "object",
            "properties": {
                "satellite": {
                    "type": "string"
                },
                "frequency": {
                    "type": "number",
                    "signed": false,
                    "size": 32,
                    "example": 10714
                },
                "polarity": {
                    "$ref": "#/definitions/polarity",
                    "example": "horizontal"
                },
                "symbolrate": {
                    "type": "number",
                    "signed": false,
                    "size": 16,
                    "example": 22000
                },
                "fec": {
                    "$ref": "#/definitions/fec",
                    "example": "fec5_6"
                },
                "modulation": {
                    "$ref": "#/definitions/dvbsmodulation",
                    "example": "qpsk"
                },
                "dvbs2": {
                    "type": "boolean"
                }
            },
            "required": [
                "satellite",
                "frequency",
                "polarity",
                "symbolrate",
                "fec",
                "modulation",
                "dvbs2"
            ]
        },
        "dvbcmodulation": {
            "type": "string",
            "enum": [
                "auto",
                "64qam",
                "128qam",
                "256qam"
            ]
        },
        "dvbctuningparams": {
            "type": "object",
            "properties": {
                "frequency": {
                    "type": "number",
                    "signed": false,
                    "size": 32,
                    "example": 474000000
                },
                "symbolrate": {
                    "type": "number",
                    "signed": false,
                    "size": 16,
                    "example": 6900
                },
                "modulation": {
                    "$ref": "#/definitions/dvbcmodulation",
                    "example": "128qam"
                }
            },
            "required": [
                "frequency",
                "symbolrate",
                "modulation"
            ]
        },
        "dvburistring": {
            "summary": "DVB triplet of the form a.b.c, where 'a' is the original network ID, 'b' is the transport ID and 'c' is the service ID, in decimal",
            "type": "string",
            "example": "2.2041.9212"
        },
        "service": {
            "type": "object",
            "properties": {
                "shortname": {
                    "summary": "Service name as given by the service descriptor in the SDT",
                    "type": "string",                    
                    "example": "Channel 4"
                },
                "dvburi": {
                    "$ref": "#/definitions/dvburistring"
                },
                "lcn": {
                    "summary": "Logical channel number",
                    "type": "number",
                    "size": 16,
                    "example": 1001
                }
            },
            "required": [
                "shortname",
                "dvburi",
                "lcn"
            ]
        },
        "eitevent": {
            "summary": "EIT event information",
            "type": "object",
            "properties": {
                "name": {
                    "summary": "Name of the DVB event as defined in the short event descriptor",
                    "type": "string",
                    "example": "Channel 4 News"
                },
                "starttime": {
                    "type": "number",
                    "signed": false,
                    "size": 32,
                    "summary": "UTC start time of the event in seconds",
                    "example": 1587562065
                },
                "duration": {
                    "summary": "Duration of the event in seconds",
                    "type": "number",
                    "signed": false,
                    "size": 32,
                    "example": 1800
                },
                "eventid": {
                    "summary": "ID of the event from the event information table",
                    "type": "number",
                    "signed": false,
                    "size": 16,
                    "example": 3012
                },
                "shortdescription": {
                    "summary": "Event description from the EIT short event descriptor",
                    "type": "string",                    
                    "example": "The current national and world news"
                }
            },
            "required": [
                "name",
                "starttime",
                "duration",
                "eventid",
                "shortdescription"
            ]
        },
        "eventtype": {
            "summary": "Event type that's sent as an asynchronous notification",
            "type": "string",
            "enum": [
                "ServiceSearchStatus"
            ]
        },
        "result": {
            "type":"object",
            "properties": {
                "success": {
                    "$ref": "#/definitions/success"
                }
            },
            "required": [
                "success"
            ]
        },
        "success": {
            "summary": "Whether the request succeeded",
            "type": "boolean",
            "example": "true"
        }
    },
    "properties": {
        "numberOfCountries": {
            "summary": "Number of country configurations available",
            "readonly": true,
            "params": {
                "type": "number",
                "signed": false,
                "size": 8,
                "example": 5
            }
        },
        "countryList": {
            "summary": "Array containing the name and 3 character ISO country code for all the available country configurations",
            "readonly": true,
            "params": {
                "type": "array",
                "description": "List of available country configurations",
                "items": {
                    "$ref": "#/definitions/countryconfig"
                }
            }
        },
        "country": {
            "summary": "Country configuration using the ISO 3-character country code",
            "params": {
                "$ref": "#/definitions/countrycode"
            }
        },
        "lnbList": {
            "summary": "Array of LNBs defined in the database",
            "readonly": true,
            "params": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/lnbsettings"
                }
            }
        },
        "satelliteList": {
            "summary": "Array of satellites defined in the database",
            "readonly": true,
            "params": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/satellitesettings"
                }
            }
        },
        "numberOfServices": {
            "summary": "Total number of services in the service database",
            "readonly": true,
            "params": {
                "type": "number",
                "signed": false,
                "size": 16,
                "example": 145
            }
        },
        "serviceList": {
            "summary": "List of services for the given type of tuner or all services if no tuner is defined",
            "readonly": true,
            "index": {
                "name": "Optional tuner type",
                "example": "dvbs"
            },
            "params": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/service"
                }
            }
        },
        "nowNextEvents": {
            "summary": "Now and next events (EITp/f) for the given service",
            "readonly": true,
            "index": {
                "name": "Service URI string",
                "example": "9018.4161.1001"
            },
            "params": {
                "type": "object",
                "properties": {
                    "now": {
                        "$ref": "#/definitions/eitevent"
                    },
                    "next": {
                        "$ref": "#/definitions/eitevent"
                    }
                }
            }
        },
        "scheduleEvents": {
            "summary": "Events which are scheduled (EITsched) for the given service",
            "readonly": true,
            "index": {
                "name": "Service URI string, with optional start and end times as number of seconds UTC",
                "example": "9018.4161.1001:12345000,12346000"
            },
            "params": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/eitevent"
                }
            }
        },
        "status": {
            "summary": "Information related to the play handle defined by the index",
            "readonly": true,
            "index": {
                "name": "Play handle",
                "example": "0"
            },
            "params": {
                "type": "object",
                "properties": {
                    "tuner": {
                        "summary": "The tuner id used by the play handle",
                        "type": "number",
                        "signed": false,
                        "size": 8,
                        "example": 0
                    },
                    "demux": {
                        "summary": "The demux id used by the play handle",
                        "type": "number",
                        "signed": false,
                        "size": 8,
                        "example": 0
                    },
                    "pmtpid": {
                        "summary": "The PMT PID of the service being played",
                        "type": "number",
                        "signed": false,
                        "size": 16,
                        "example": 1100
                    },
                    "dvburi": {
                        "$ref": "#/definitions/dvburistring"
                    },
                    "lcn": {
                        "summary": "LCN of the service being played",
                        "type": "number",
                        "signed": false,
                        "size": 16,
                        "example": 1001
                     }
                },
                "required": [
                    "tuner",
                    "demux",
                    "pmtpid",
                    "dvburi",
                    "lcn"
                ]
            }
        }
    },
    "methods": {
        "addLnb": {
            "summary": "Add a new LNB to the database.\n  \n### Event \n\n No Events",
            "params": {
                "$ref": "#/definitions/lnbsettings"
            },
            "result": {
                "summary": "true if the LNB is added, false otherwise",
                "type": "boolean",
                "example": true
            }
        },
        "addSatellite": {
            "summary": "Add a new satellite to the database.\n  \n### Event \n\n No Events",
            "params": {
                "$ref": "#/definitions/satellitesettings"
            },
            "result": {
                "type": "boolean",
                "summary": "true if the satellite is added, false otherwise",
                "example": true
            }
        },
        "finishServiceSearch": {
            "summary": "Finishes a service search.\n  \n### Event \n\n No Events",
            "params": {
                "type": "object",
                "properties": {
                    "tunertype": {
                        "$ref": "#/definitions/tunertype",
                        "example": "dvbs"
                    },
                    "savechanges": {
                        "summary": "true if the services found during the search should be saved",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "tunertype",
                    "savechanges"
                ]
            },
            "result": {
                "summary": "false if the tunertype isn't valid, true otherwise",
                "type": "boolean",
                "example": true
            }
        },
        "startPlaying": {
            "summary": "Starts playing the specified service.\n  \n### Event \n\n No Events",
            "params": {
                "type": "object",
                "properties": {
                    "dvburi": {
                        "$ref": "#/definitions/dvburistring"
                    },
                    "lcn": {
                        "summary": "LCN of the service to be tuned to",
                        "type": "number",
                        "signed": false,
                        "size": 16
                    }
                }
            },
            "result": {
                "summary": "The play handle assigned to play the given service. Will be -1 if the service can't be played",
                "type": "number",
                "example": 0
            }
        },
        "startServiceSearch": {
            "summary": "Starts a service search.\n \n### Events  \n| Event | Description | \n| :----------- | :----------- | \n|`searchstatus`|Triggered during the course of a service search.|",
            "events": [
                "searchstatus"
            ],
            "params": {
                "type": "object",
                "properties": {
                    "tunertype": {
                        "$ref": "#/definitions/tunertype",
                        "example": "dvbs"
                    },
                    "searchtype": {
                        "$ref": "#/definitions/searchtype",
                        "example": "network"
                    },
                    "retune": {
                        "summary": "true if current services are to be replaced in the database, false if the scan is to update the existing services",
                        "type": "boolean"        
                    },
                    "usetuningparams": {
                        "summary": "Set to true if the optional tuning parameters are defined",
                        "type": "boolean",                  
                        "example": true
                    },
                    "dvbstuningparams": {
                        "$ref": "#/definitions/dvbstuningparams"
                    },
                    "dvbctuningparams": {
                        "$ref": "#/definitions/dvbctuningparams"
                    }
                },
                "required": [
                    "tunertype",
                    "searchtype",
                    "retune",
                    "usetuningparams"
                ]
            },
            "result": {
                "type": "boolean",
                "summary": "true if the search is started, false otherwise",
                "example": true
            }
        },
        "stopPlaying": {
            "summary": "Stops playing the specified service.\n  \n### Event \n\n No Events",
            "params": {
                "summary": "The play handle returned by startPlaying",
                "type": "number",
                "example": 0
            },
            "result": {
                "$ref": "#/common/results/void"
            }
        }
    },
    "events": {
        "searchstatus": {
            "summary": "Triggered during the course of a service search",
            "params": {
                "type": "object",
                "properties": {
                    "handle": {
                        "summary": "The handle assigned for the search and to which this information is relevant",
                        "type": "number",
                        "size": 32,
                        "unsigned": true,
                        "example": 0
                    },
                    "eventtype": {
                        "$ref": "#/definitions/eventtype",
                        "example": "ServiceSearchStatus"
                    },
                    "finished": {
                        "summary": "true if the service search has finished, false otherwise",
                        "type": "boolean",
                        "example": false
                    },
                    "progress": {
                        "summary": "Progress of the search expressed as a percentage",
                        "type": "number",
                        "size": 8,
                        "unsigned": true,
                        "example": 65
                    }
                },
                "required": [
                    "handle",
                    "eventtype",
                    "finished",
                    "progress"
                ]
            }
        }
    }
}