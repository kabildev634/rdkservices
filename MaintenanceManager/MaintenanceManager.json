{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/Thunder/master/Tools/JsonGenerator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "MaintenanceManagerPlugin", 
        "class": "MaintenanceManager", 
        "description": "The `MaintenanceManager` plugin allows you to control and monitor maintenance activities on set-top devices."
    },
    "definitions": {
        "maintenanceStatus": {
            "summary": "The current maintenance status",
            "type": "string",
            "example": "MAINTENANCE_STARTED"
        },
        "maintenanceMode":{
            "summary": "The maintenance mode. The `FOREGROUND` mode runs all maintenance tasks. The `BACKGROUND` mode runs maintenance tasks that do not impact the user experience.",
            "enum": [
                "FOREGROUND",
                "BACKGROUND"
            ],
            "type": "string",
            "example": "BACKGROUND"
        },
        "optOut":{
            "summary": "The opt-out mode. See [setMaintenanceMode](#method.setMaintenanceMode) for a description of each opt-out mode",
            "enum": [
                "NONE",
                "ENFORCE_OPTOUT",
                "BYPASS_OPTOUT",
                "IGNORE_UPDATE"
            ],
            "default": "NONE",
            "type": "string",
            "example": "ENFORCE_OPTOUT"
        },
        "result": {
            "type":"object",
            "properties": {
                "success": {
                    "$ref": "#/definitions/success"
                }
            },
            "required": [
                "success"
            ]
        },
        "success": {
            "summary": "Whether the request succeeded",
            "type": "boolean",
            "example": "true"
        }
    },
    "methods": {
        "getMaintenanceActivityStatus" :{
            "summary": "Gets the maintenance activity status details.  \n**Maintenance Statuses**  \n* `MAINTENANCE_IDLE` - Sent when the Maintenance service is not executing any activities and until the first maintenance task is started  \n* `MAINTENANCE_STARTED` - Sent immediately on maintenance startup either scheduled or on boot  \n* `MAINTENANCE_ERROR` - Sent after receiving error notification while executing any of the maintenance activities  \n* `MAINTENANCE_COMPLETE` - Sent after receiving `*_COMPLETE` notification from all critical maintenance tasks  \n* `MAINTENANCE_INCOMPLETE` - Sent whenever the Maintenance service doesn't execute one or more of the tasks. `MAINTENANCE_ERROR` is returned even if only one task returns error.",
            "result": {
                "type": "object",
                "properties": {
                    "maintenanceStatus":{
                        "$ref": "#/definitions/maintenanceStatus" 
                    },
                    "lastSuccessfulCompletionTime":{
                        "summary": "The time the last maintenance completed or `0` if not applicable",
                        "type": "integer",
                        "example": 12345678
                    },
                    "isCriticalMaintenance":{
                        "summary": "`true` if the maintenance activity cannot be aborted, otherwise `false`",
                        "type": "boolean",
                        "example": true
                    },
                    "isRebootPending": {
                        "summary": "`true` if the device is going to reboot, otherwise `false`",
                        "type": "boolean",
                        "example": false
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "maintenanceStatus",
                    "lastSuccessfulCompletionTime",
                    "isCriticalMaintenance",
                    "isRebootPending",
                    "success"
                ]
            }
        },
        "getMaintenanceMode": {
            "summary": "Gets the current maintenance mode and software upgrade opt-out mode that is stored in the persistent location",
            "result": {
                "type": "object",
                "properties": {
                    "maintenanceMode":{
                        "$ref": "#/definitions/maintenanceMode"
                    },
                    "optOut":{
                        "$ref": "#/definitions/optOut"
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "maintenanceMode",
                    "optOut",
                    "success"
                ]
            }
        },
        "getMaintenanceStartTime":{
            "summary": "Gets the scheduled maintenance start time",
            "result": {
                "type": "object",
                "properties": {
                    "maintenanceStartTime": {
                        "summary": "The start time",
                        "type": "integer",
                        "example": 12345678
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "maintenanceStartTime",
                    "success"
                ]
            }
        },
        "setMaintenanceMode":{
            "summary": "Sets the maintenance mode and software upgrade opt-out mode.  \n*Opt-Out Modes*  \n* `NONE` - The software upgrade process is unaffected and proceeds with the download and update.  \n* `ENFORCE_OPTPOUT` - The software upgrade process pauses after discovering an update is available and sends a `System` service `onFirmwareUpdateStateChange` event with the `On Hold for opt-out` state. An application must give the user the option of whether or not to accept the update. If the user accepts the update, then the opt-out mode must be set to `BYPASS-OPTOUT`.  \n* `BYPASS_OPTOUT` The software upgrade process proceeds with a download and update, as directed by the application, for this occurrence of the maintenance window (used when the user accepts the software update).  \n* `IGNORE-UPDATE` -  The software upgrade process ignores any non-mandatory firmware updates, and will NOT send any notification. Note that in this mode, the software upgrade process still sets `ENFORCE-OPTOUT` if the update is mandatory. Use the `getFirmwareUpdateInfo` method from the `System` service to determine what software version is available for download and to determine if the update is consider mandatory (using the `rebootImmediately` parameter).",
            "params": {
                "type":"object",
                "properties": {
                    "maintenanceMode":{
                        "$ref": "#/definitions/maintenanceMode"
                    },
                    "optOut":{
                        "$ref": "#/definitions/optOut"
                    }
                },
                "required": [
                    "maintenanceMode",
                    "optOut"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "startMaintenance":{
            "summary": "Starts maintenance activities",
            "result": {
                "$ref": "#/definitions/result"
            }          
        },
        "stopMaintenance":{
            "summary": "Stops maintenance activities that are in progress",
            "result": {
                "$ref": "#/definitions/result"
            } 
        }
    },
    "events": {
        "onMaintenanceStatusChange":{
            "summary": "Triggered when the maintenance manager status changes. See `getMaintenanceActivityStatus` for a list of statuses.",
            "params": {
                "type": "object",
                "properties": {
                    "maintenanceStatus":{
                        "$ref": "#/definitions/maintenanceStatus" 
                    }
                },
                "required": [
                    "maintenanceStatus"
                ]
            }
        }
    }
}